{"version":3,"file":"static/js/140.0660f40b.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList1/ContactList.module.css?f651","components/ContactList1/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/Contacts/Contacts.module.css?fb9d","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formContainer\":\"ContactForm_formContainer__TWEE2\",\"form-label\":\"ContactForm_form-label__Iv1vR\",\"form-submit\":\"ContactForm_form-submit__CtH7C\"};","export const getFilter = state => state.filter.filter;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getContacts = state => state.contacts.items;\n","import React, { useState } from 'react';\n\nimport css from 'components/ContactForm/ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/contacts';\n// import { addContact } from 'redux/contactsSlice';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleInputChange = ({ target: { name, value } }) => {\n    if (name === 'number') {\n      setNumber(value);\n    }\n\n    if (name === 'name') {\n      setName(value);\n    }\n  };\n\n  // Нова функція для перевірки після втрати фокуса\n  const handleInputBlur = ({ target: { name, value } }) => {\n    const normalizedValue = value.toLowerCase();\n\n    if (name === 'number') {\n      if (value && !/^[0-9\\s()+-]+$/.test(value)) {\n        alert(\n          'Номер телефону повинен містити лише цифри та може містити пробіли, тире, дужки і може починатись з +'\n        );\n        return;\n      }\n\n      if (contacts.some(contact => contact.number === value)) {\n        alert(`${value} вже є у списку контактів`);\n        setNumber('');\n        return;\n      }\n    }\n\n    if (name === 'name') {\n      if (value && !/^[a-zA-Zа-яА-Я\\s'-]+$/.test(value)) {\n        alert(\n          \"Ім'я може містити лише літери, апостроф, тире та пробіли. Наприклад, Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        );\n        return;\n      }\n\n      if (\n        contacts.some(contact => contact.name.toLowerCase() === normalizedValue)\n      ) {\n        alert(`${value} вже є у списку контактів`);\n        setName('');\n        return;\n      }\n    }\n  };\n  //\n  // const handleInputChange = ({ target: { name, value } }) => {\n  //   const normalizedValue = value.toLowerCase();\n\n  //   if (name === 'number') {\n  //     if (value && !/^[0-9\\s()+-]+$/.test(value)) {\n  //       alert(\n  //         'Номер телефону повинен містити лише цифри та може містити пробіли, тире, дужки і може починатись з +'\n  //       );\n  //       return;\n  //     }\n\n  //     if (contacts.some(contact => contact.number === value)) {\n  //       alert(`${value} вже є у списку контактів`);\n  //       return;\n  //     } else {\n  //       setNumber(value);\n  //     }\n  //   }\n\n  //   if (name === 'name') {\n  //     if (value && !/^[a-zA-Zа-яА-Я\\s'-]+$/.test(value)) {\n  //       alert(\n  //         \"Ім'я може містити лише літери, апостроф, тире та пробіли. Наприклад, Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n  //       );\n  //       return;\n  //     }\n\n  //     if (\n  //       contacts.some(contact => contact.name.toLowerCase() === normalizedValue)\n  //     ) {\n  //       alert(`${value} вже є у списку контактів`);\n  //       return;\n  //     } else {\n  //       setName(value);\n  //     }\n  //   }\n  // };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleFormSubmit = evt => {\n    evt.preventDefault();\n    dispatch(addContact({ name, number }));\n    reset();\n  };\n\n  return (\n    <div className={css.formContainer}>\n      <h1>Phonebook</h1>\n      <form action=\"\" onSubmit={handleFormSubmit}>\n        <div className={css['form-label']}>\n          <label htmlFor=\"name\">Name:</label>\n          <input\n            className={css.input}\n            value={name}\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={handleInputChange}\n            onBlur={handleInputBlur}\n          />\n        </div>\n\n        <div className={css['form-label']}>\n          <label htmlFor=\"number\">Number:</label>\n          <input\n            className={css.input}\n            value={number}\n            type=\"tel\"\n            id=\"number\"\n            name=\"number\"\n            pattern=\"^[0-9]+$\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={handleInputChange}\n            onBlur={handleInputBlur}\n          />\n        </div>\n\n        <input\n          className={css['form-submit']}\n          type=\"submit\"\n          value=\"Add contact\"\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactList_container__9h0yI\",\"contactTable\":\"ContactList_contactTable__YuCuB\",\"contactName\":\"ContactList_contactName__WX-fh\",\"contactNumber\":\"ContactList_contactNumber__Vrqys\",\"deleteButton\":\"ContactList_deleteButton__Yioya\"};","import React, { useEffect } from 'react';\n\nimport css from 'components/ContactList1/ContactList.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/contacts/selectors';\n// import { deleteContact } from 'redux/contactsSlice';\nimport { deleteContact, fetchContacts } from 'redux/contacts/contacts';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n\n  const { items } = useSelector(state => state.contacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  // const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const filterByName = filter => {\n    return items.filter(contact => contact.name.toLowerCase().includes(filter));\n  };\n\n  const normalizedFilter = filter.toLowerCase();\n  const filtredContacts = filterByName(normalizedFilter);\n\n  return (\n    <div className={css.container}>\n      <h2>Contacts</h2>\n      <table className={css.contactTable}>\n        <tbody>\n          {filtredContacts.map(({ id, name, number }) => (\n            <tr key={id}>\n              <td>\n                <p className={css.contactName}>{name}</p>\n              </td>\n              <td>\n                <p className={css.contactNumber}>{number}</p>\n              </td>\n              <td>\n                <button\n                  className={css.deleteButton}\n                  onClick={() => dispatch(deleteContact(id))}\n                >\n                  Delete\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","// import React from 'react';\n\nimport css from 'components/Filter/Filter.module.css';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { getFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const filterValue = useSelector(getFilter);\n\n  const handleFilterChange = ({ target: { value } }) => {\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <label className={css.label} htmlFor=\"\">\n      Find contacts by name:\n      <input\n        className={css.input}\n        type=\"text\"\n        value={filterValue.filter}\n        name=\"filter\"\n        onChange={handleFilterChange}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Contacts_container__WzsIr\"};","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList1/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport React from 'react';\nimport css from 'pages/Contacts/Contacts.module.css';\n\nconst Contacts = () => {\n  return (\n    <div className={css['container']}>\n      <ContactForm />\n\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["getFilter","state","filter","getContacts","contacts","items","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","handleInputChange","target","value","handleInputBlur","normalizedValue","toLowerCase","test","alert","some","contact","className","css","action","onSubmit","evt","preventDefault","addContact","htmlFor","type","id","pattern","title","required","onChange","onBlur","useEffect","fetchContacts","filtredContacts","includes","filterByName","map","onClick","deleteContact","filterValue","setFilter"],"sourceRoot":""}